[2018-04-16 16:11:54,238] INFO Creating /controller (is it secure? false) (kafka.utils.ZKCheckedEphemeral)
[2018-04-16 16:11:54,240] INFO Result of znode creation is: OK (kafka.utils.ZKCheckedEphemeral)
[2018-04-16 16:11:54,241] INFO 0 successfully elected as leader (kafka.server.ZookeeperLeaderElector)
[2018-04-16 16:11:54,304] INFO re-registering broker info in ZK for broker 0 (kafka.server.KafkaHealthcheck)
[2018-04-16 16:11:54,305] INFO Creating /brokers/ids/0 (is it secure? false) (kafka.utils.ZKCheckedEphemeral)
[2018-04-16 16:11:54,318] INFO Result of znode creation is: OK (kafka.utils.ZKCheckedEphemeral)
[2018-04-16 16:11:54,318] INFO Registered broker 0 at path /brokers/ids/0 with addresses: PLAINTEXT -> EndPoint(ubuntu,9092,PLAINTEXT) (kafka.utils.ZkUtils)
[2018-04-16 16:11:54,318] INFO done re-registering broker (kafka.server.KafkaHealthcheck)
[2018-04-16 16:11:54,318] INFO Subscribing to /brokers/topics path to watch for new topics (kafka.server.KafkaHealthcheck)
[2018-04-16 16:11:54,389] INFO [ReplicaFetcherManager on broker 0] Removed fetcher for partitions [kafka_topic,0],[project_topic,0],[kafka_test,0] (kafka.server.ReplicaFetcherManager)
[2018-04-16 16:11:54,421] INFO New leader is 0 (kafka.server.ZookeeperLeaderElector$LeaderChangeListener)
[2018-04-16 16:16:05,304] INFO [Group Metadata Manager on Broker 0]: Removed 0 expired offsets in 0 milliseconds. (kafka.coordinator.GroupMetadataManager)
[2018-04-16 16:26:05,304] INFO [Group Metadata Manager on Broker 0]: Removed 0 expired offsets in 0 milliseconds. (kafka.coordinator.GroupMetadataManager)
[2018-04-16 16:36:05,304] INFO [Group Metadata Manager on Broker 0]: Removed 0 expired offsets in 1 milliseconds. (kafka.coordinator.GroupMetadataManager)
[2018-04-16 16:46:05,305] INFO [Group Metadata Manager on Broker 0]: Removed 0 expired offsets in 1 milliseconds. (kafka.coordinator.GroupMetadataManager)
[2018-04-16 16:48:34,919] INFO [Kafka Server 0], shutting down (kafka.server.KafkaServer)
[2018-04-16 16:48:34,952] INFO [Kafka Server 0], Starting controlled shutdown (kafka.server.KafkaServer)
